@using Microflake.Core.ViewModel
@model Microflake.Core.ViewModel.Products.ListProduct
@{ 
    ViewBag.Title = "Index";
    
}

@Html.HiddenFor(x => x.MaximumPrice)

<div class="breadcrumbs_area">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="breadcrumb_content">
                    <h3>Caps</h3>
                    <ul>
                        <li><a href="/">home</a></li>
                        <li>&gt;</li>
                        <li>Shop</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="shop_area shop_fullwidth shop_reverse">
    <div class="container">
        <div class="row">

            <div class="col-lg-3 col-md-12">
                <!--sidebar widget start-->
                <div class="sidebar_widget">

                    <div class="widget_list widget_filter">
                        <h2>Filter by price</h2>
                        <form action="#">
                            <div id="slider-range" class="ui-slider ui-corner-all ui-slider-horizontal ui-widget ui-widget-content"><div class="ui-slider-range ui-corner-all ui-widget-header" style="left: 0%; width: 100%;"></div><span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default" style="left: 0%;"></span><span tabindex="0" class="ui-slider-handle ui-corner-all ui-state-default" style="left: 100%;"></span></div>
                            <input type="text" name="text" id="amount">
                            <button type="submit">Filter</button>

                        </form>
                    </div>
                    <div class="widget_list">
                        @foreach (var category in Model.Categorylist)
                        {
                            <h2 data-href="@Url.Action("FilterProduct", "Shop", new {  categoryID = category.Id ,sortBy = Model.SortBy })" class="dataLink mt-2 @(Model.CategoryID.HasValue && Model.CategoryID.Value == category.Id ? "checked" : string.Empty) " class="filter-title">@category.Name</h2>

                            <ul class="list-menu">
                                @foreach (var item in Model.SubCategorylist.Where(x => x.CategoryId == category.Id))
                                {
                                    <li class="check-item check-item-unChecked dataLink" data-href="@Url.Action("FilterProduct", "Shop", new {  subcategoryID = item.Id ,sortBy = Model.SortBy })">
                                        @*  <input data-href="@Url.Action("FilterProduct", "Shop", new {  subcategoryID = item.Id ,sortBy = Model.SortBy })" type="checkbox" class="dataLink @(Model.CategoryID.HasValue && Model.CategoryID.Value == category.Id ? "checked" : string.Empty) custom-control-input">*@
                                        @* <span class="custom-control-label">@item.Name </span>*@
                                        <a class=" @(Model.CategoryID.HasValue && Model.CategoryID.Value == category.Id ? "checked" : string.Empty) custom-control-input">@item.Name </a>
                                    </li>
                                }
                            </ul>

                        }
                    </div>
                    <a href="@Url.Action("Index", "Shop")" class="btn mb-4" style="background-color:#9d4d4a; color:white;">Reset Filters</a>
                </div>
                <!--sidebar widget end-->
            </div>
            <div class="col-lg-9 col-md-12">
                <div class="shop-products-wrapper" >
                    <!--shop wrapper start-->
                    
                    <!--shop toolbar end-->
                    <div id="ProductsDiv">
                        @{

                            Html.RenderPartial("FilterProduct", Model);

                        }
                    </div>

                </div>

            </div>
    </div>
</div>
</div>
@section scripts{
    <script>
        

      $('input:checkbox').click(function() {
        $('input:checkbox').not(this).prop('checked', false);
      });
        $(".check-item").click(function () {
            debugger
            if ($(this).hasClass("check-item-unChecked")) {
                $(this).removeClass("check-item-unChecked");
                $(".check-item").removeClass("check-item-checked");
                $(".check-item").addClass("check-item-unChecked");
                $(this).addClass("check-item-checked");
            }
            else {
                $(this).removeClass("check-item-checked");
                $(this).addClass("check-item-unChecked");
            }
        })

        $("#dataLinkTest").change(function () {

            var url = $("#dataLinkTest").val();

            if (url != "" || url != undefined) {
                GetData(url);
            }
        });
        $(".dataLink").click(function () {debugger

        var url = $(this).attr("data-href");

        if (url != "" || url != undefined) {
            GetData(url);
        }
        });
        function GetData(dUrl) {

		console.log("getdata in");
		//showLoader();

		$.ajax({
           url: dUrl,
			data: {
				minimumPrice : priceSlider.slider("values", 0),
				maximumPrice : priceSlider.slider("values", 1)
			}
		})
        .done(function (response) {
            console.log("done");

        	$("#ProductsDiv").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	console.log("fail");
        	
        })
		.always(function(){
			console.log("always");

		});
		console.log("getdata out");
	}


        // Price Range Slider
        var callTimeout;
          $("#min-price").val(0);


        var priceSlider = $( "#slider-range" ).slider({
        range: true,
        min: 0,
        max: @Model.MaximumPrice,
        values: [ 0, @Model.MaximumPrice ],
            slide: function (event, ui) {debugger
                var minPrice = ui.values[0];
                var maxPrice = ui.values[1];
                $("#min-price").val(minPrice);

                $("#max-price").val(maxPrice);
                $("#amount").val("£" + ui.values[0] + " - £" + ui.values[1]);
            clearTimeout(callTimeout);
                callTimeout = setTimeout(PriceRangeChange(ui.values[0], ui.values[1]), 500);
       }
    });
        $("#amount").val( "£" + $( "#slider-range" ).slider( "values", 0 ) +
       " - £" + $( "#slider-range" ).slider( "values", 1 ) );

      
        function PriceRangeChange(min,max){debugger
		$.ajax({
			url: '@Url.Action("FilterProduct", "Shop")',
			data: {
				searchTerm: $("#SearchTerm").val(),
				sortBy: $("#SortBy").val(),
                categoryID: $("#CategoryID").val(),

                minimumPrice: min,
                maximumPrice: max
			}
		})
        .done(function (response) {
        	$("#ProductsDiv").html(response);
        })
        .fail(function (XMLHttpRequest, textStatus, errorThrown) {
        	
        });
	}
        //
    </script>
}

